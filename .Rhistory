priceop=c(OPTe[1,1],OPTa[1,1])
names(priceop)=c("E","A")
return(priceop)}
price.american=function(n,opt="put"){
u.n=exp(sigma*sqrt(T/n)); d.n=1/u.n
p.n=(exp(r*T/n)-d.n)/(u.n-d.n)
SJ=matrix(0,n+1,n+1)
SJ[1,1]=S
for(i in(2:(n+1)))
{for(j in(1:i)) {SJ[i,j]=S*u.n^(i-j)*d.n^(j-1)}}
OPTe=matrix(0,n+1,n+1)
OPTa=matrix(0,n+1,n+1)
if(opt=="call"){
OPTa[n+1,]=(SJ[n+1,]-K)*(SJ[n+1,]>K)
OPTe[n+1,]=(SJ[n+1,]-K)*(SJ[n+1,]>K)
}
if(opt=="put"){
OPTa[n+1,]=(K-SJ[n+1,])*(SJ[n+1,]<K)
OPTe[n+1,]=(K-SJ[n+1,])*(SJ[n+1,]<K)
}
for(i in(n:1))
{
for(j in(1:i))
{if(opt=="call"){
OPTa[i,j]=max((SJ[i,j]-K)*(SJ[i,j]>K),
exp(-r*T/n)*(OPTa[i+1,j]*p.n+
(1-p.n)*OPTa[i+1,j+1]))}
if(opt=="put"){
OPTa[i,j]=max((K-SJ[i,j])*(K>SJ[i,j]),
exp(-r*T/n)*(OPTa[i+1,j]*p.n+
(1-p.n)*OPTa[i+1,j+1]))}
OPTe[i,j]=exp(-r*T/n)*(OPTe[i+1,j]*p.n+
(1-p.n)*OPTe[i+1,j+1])}}
priceop=c(OPTe[1,1],OPTa[1,1])
names(priceop)=c("E","A")
return(priceop)}
d1=1/(sigma*sqrt(T))*(log(S/K)+(r+sigma^2/2)*T)
d2=d1-sigma*sqrt(T)
BS=-S*pnorm(-d1)+K*exp(-r*T)*pnorm(-d2)  )
find.packages("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
swirl()
library(swirl)
add2<-function(x,y) {
x + y
}
add2<-function(x,y) {
+   x + y
+ }
add2(3,5)
add2(7,9)
above<-function(x,n){
use<-x>n
x[use]
}
x<-1:20
above(x,11)
above(x,4)
columnmean<- function(y){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i])
}
means
}
columnmeans(airquality)
airquality
columnmeans<- function(y){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i])
}
means
}
columnmeans(airquality)
columnmeans<- function(y, removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i])
}
means
}
columnmeans(airquality)
columnmeans
columnmeans<- function(y, removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i])
}
means
}
columnmeans(airquality)
columnmeans<- function(y, removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i]) na.rm=removeNA
}
means
}
columnmeans<- function(y, removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i]) na.rm=removeNA
}
means
}
columnmeans<- function(y, removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i], na.rm = removeNA)
}
means
}
columnmeans(airquality)
rm(list=ls())
install.packages("swirl")
library(swirl)
swirl()
rm(list=rm())
rm(list=rm())
rm(list=ls())
library(swirl)
swirl()
plot(child~parent,galton)
plot(jitter(child,4)~parent,galton)
f<-function(x,y){}
f<-function(x,y){
x^2+x/z
}
f(4,3)
z<-z
z<-t
f(5,4)
sys.time()
Sys.time()
?rnorm
b<-rnorm(10)
b
getwd()
?array
?rnorm
?array
?gl
?sapply
lapply
?lapply
?str
debug(lm)
lm(y~x)
?best
??best
all_data<-outcome<-read.csv("outcome-of-care-measures.csv",colClasses="character")
getwd()
?get.hist.quote
library(tseries)
?get.hist.quote
get.hist.quote
install.packages("quantmod")
library(quantmod)
?getSymbols
tickers <- c("RDS-B", "WMT", "TD", "VZ", "MDLZ", "MCD", "BRK-B", "KRFT", "AAPL", "FB", "TSLA", "VTI", "VMBS", "MBG", "JWN", "GM", "TGT", "JBL", "BLK", "USO", "XHS", "KRE", "TIF", "XLK", "TJX")
getSymbols(tickers, from="2005-12-25", to="2011-01-31")
head(tickers)
ClosePrices <- do.call(merge, lapply(tickers[,1], function(x) Cl(get(x))))
ClosePrices <- do.call(merge, lapply(tickers, function(x) Cl(get(x))))
tickers <- c("RDS-B", "WMT", "TD", "VZ", "MDLZ", "MCD", "BRK-B", "AAPL", "FB", "TSLA", "VTI", "VMBS", "MBG", "JWN", "GM", "TGT", "JBL", "BLK", "USO", "XHS", "KRE", "TIF", "XLK", "TJX")
getSymbols(tickers, from="2005-12-25", to="2011-01-31")
# If you want to merge all the close prices into one object:
ClosePrices <- do.call(merge, lapply(tickers, function(x) Cl(get(x))))
tickers <- c("RDS-B", "WMT", "TD", "VZ", "MDLZ", "MCD", "BRK-B", "AAPL", "TSLA", "VTI", "VMBS", "MBG", "JWN", "GM", "TGT", "JBL", "BLK", "USO", "XHS", "KRE", "TIF", "XLK", "TJX")
getSymbols(tickers, from="2005-12-25", to="2011-01-31")
# If you want to merge all the close prices into one object:
ClosePrices <- do.call(merge, lapply(tickers, function(x) Cl(get(x))))
tickers <- c("RDS-B", "WMT", "TD", "VZ", "MDLZ", "MCD", "BRK-B", "AAPL", "TSLA")
getSymbols(tickers, from="2005-12-25", to="2011-01-31")
# If you want to merge all the close prices into one object:
ClosePrices <- do.call(merge, lapply(tickers, function(x) Cl(get(x))))
head(ClosePrices)
dim(ClosingPrices)
dim(ClosePrices)
?do.call
head(ClosingPrices$TSLA)
head(ClosePrices$TSLA)
tail(ClosePrices$TSLA)
table(ClosePrices$TSLA)
length(ClosePrices$TSLA)
length(complete.cases(ClosePrices$TSLA))
table(complete.cases(ClosePrices$TSLA))
clean<-na.omit(ClosePrices$TSLA)
length(clean)
head(clean)
tickers <- c("RDS-B", "WMT", "TD", "VZ", "MDLZ", "MCD", "BRK-B", "AAPL", "TSLA")
getSymbols(tickers, from="2005-12-25", to="2011-01-31")
# If you want to merge all the close prices into one object:
ClosePrices <- do.call(merge, lapply(tickers, function(x) Cl(get(x))))
head(ClosePrices)
library(quantmod)
tickers <- c("RDS-B", "WMT", "TD", "VZ", "MDLZ", "MCD", "BRK-B", "AAPL", "TSLA")
getSymbols(tickers, from="2005-12-25", to="2011-01-31")
# If you want to merge all the close prices into one object:
ClosePrices <- do.call(merge, lapply(tickers, function(x) Cl(get(x))))
head(ClosePrices)
dim(ClosePrices)
?list
Course code: B52529
Length: 2 days
Cost: $1400/Student
Comment below for futher details!
# Argument lists
f <- function() x
# Note the specification of a "..." argument:
formals(f) <- al <- alist(x = , y = 2+3, ... = )
f
al
f <- function() x
formals(f) <- al <- alist(x = , y = 2+3, ... = )
f
al
vector("list", 5)
e1 <- new.env()
e1$a <- 10
e1$b <- 20
as.list(e1)
makeCacheMatrix <- function(x = matrix()) { #assign the input matrix to x
m <- NULL #set m to null
set <- function(y) { # create a sub-function which can re-set x
x <<- y #superassign the input of this function to x
m <<- NULL #again set m to null
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) { #assign the input matrix to x
m <- NULL #set m to null
set <- function(y) { # create a sub-function which can re-set x
x <<- y #superassign the input of this function to x
m <<- NULL #again set m to null
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
madeup <- matrix(sample(1:100, 16),4,4, byrow=TRUE)
test <- makeCacheMatrix(madeup)
bigVec <- makeVector(1:1000)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
bigVec <- makeVector(1:1000)
biggerVec <- makeVector(1:100000)
cachemean(bigVec)
cachemean(bigVec)
cachemean(biggerVec)
cachemean(biggerVec)
bigVec <- makeVector(1:2)
cachemean(bigVec)
cachemean(bigVec)
bigVec <- makeVector(1:1000)
cachemean(bigVec)
bigVec <- makeVector(1:2)
cachemean(bigVec)
cachemean(bigVec)
cachemean(beggervec)
bigVec$get
bigVec <- makeVector(1:2)
cachemean(beggervec)
cachemean(biggerVec)
cachemean(bigVec)
biggerVec$get()
bigVec$get()
makeCacheMatrix <- function(x = matrix()) { #input x will be a matrix
m <- NULL # reset our cache for the inverse to NULL each time makeCacheMatrix is called
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached inverse matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
makeCacheMatrix(madeup)
list(get = get,
makeCacheMatrix <- function(x = matrix()) { #input x will be a matrix
m <- NULL # reset our cache for the inverse to NULL each time makeCacheMatrix is called
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached inverse matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) { #input x will be a matrix
m <- NULL # reset our cache for the inverse to NULL each time makeCacheMatrix is called
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached inverse matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
mat <- makeCacheMatrix(madeup)
cacheSolve(madeup)
madeup <- matrix(sample(1:100, 16),4,4, byrow=TRUE)
cacheSolve(madeup)
cacheSolve(mat)
cacheSolve(mat)
makeCacheMatrix(1)
one <- makeCacheMatrix(1)
cacheSolve(one)
cacheSolve(one)
one <- as.list(1)
one
class(one)
one <- makeCacheMatrix(one)
one
cacheSolve(one)
class(one)
?inverse
?list
library(swirl)
rm(list=ls())
swirl
swirl()
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col="red")
summary(regrline)
## Rank hospitals by outcome in a state
## write a function called "rankhospital"
## state (eg. "NY"), outcome (eg. "pneumonia"), num (eg. "2")
## rankhospital reads "outcome-of-care-measures.csv"...
## returns a character vector with the hospital specified by num
## with the lowest 30 day mort for the specified outcome
## num can accept "best" "worst" or an integer
## num > hospitals in state returns NA
## ties settled by alphabetical hospital name
rankhospital <- function(state, outcome, num="best") {
#read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
data <- data[,c(2,7,11,17,23)]
data[,c(3,4,5)] <- sapply(data[,c(3,4,5)], as.numeric)
names(data) <- c("hospitals","states","heart attack","heart failure","pneumonia")
#check that state and outcome are vaild
states <- data[,2]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!(state%in%states)){stop("invalid state")}
if(!(outcome%in%outcomes)) {stop("invalid outcome")}
#best and worst
if (num == "best") {num <- 1}
if (num == "worst") {num <- length(na.omit(data[data$states==state & data[,outcome]!="NA", outcome]))}
if (num > length(na.omit(data[data$states==state & data[,outcome]!="NA", outcome]))) {num <- return(NA)}
#return first ordered value
if (outcome=="heart attack") {
sort <- data[order(data[,3], data[,1]), c(1,2,3)]
slice <- sort[sort[,2]==state,1]
}
else if (outcome=="heart failure") {
sort <- data[order(data[,4], data[,1]), c(1,2,4)]
slice <- sort[sort[,2]==state,1]
}
else {
sort <- data[order(data[,5], data[,1]), c(1,2,5)]
slice <- sort[sort[,2]==state,]
}
slice[num]
}
source("submitscript3.r")
getwd()
setwd("C:/Users/NC/data_science")
## Rank hospitals by outcome in a state
## write a function called "rankhospital"
## state (eg. "NY"), outcome (eg. "pneumonia"), num (eg. "2")
## rankhospital reads "outcome-of-care-measures.csv"...
## returns a character vector with the hospital specified by num
## with the lowest 30 day mort for the specified outcome
## num can accept "best" "worst" or an integer
## num > hospitals in state returns NA
## ties settled by alphabetical hospital name
rankhospital <- function(state, outcome, num="best") {
#read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
data <- data[,c(2,7,11,17,23)]
data[,c(3,4,5)] <- sapply(data[,c(3,4,5)], as.numeric)
names(data) <- c("hospitals","states","heart attack","heart failure","pneumonia")
#check that state and outcome are vaild
states <- data[,2]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!(state%in%states)){stop("invalid state")}
if(!(outcome%in%outcomes)) {stop("invalid outcome")}
#best and worst
if (num == "best") {num <- 1}
if (num == "worst") {num <- length(na.omit(data[data$states==state & data[,outcome]!="NA", outcome]))}
if (num > length(na.omit(data[data$states==state & data[,outcome]!="NA", outcome]))) {num <- return(NA)}
#return first ordered value
if (outcome=="heart attack") {
sort <- data[order(data[,3], data[,1]), c(1,2,3)]
slice <- sort[sort[,2]==state,1]
}
else if (outcome=="heart failure") {
sort <- data[order(data[,4], data[,1]), c(1,2,4)]
slice <- sort[sort[,2]==state,1]
}
else {
sort <- data[order(data[,5], data[,1]), c(1,2,5)]
slice <- sort[sort[,2]==state,]
}
slice[num]
}
source("submitscript3.r")
submit()
