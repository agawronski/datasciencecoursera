library(fpp)
naive(x)
x
xmat<-as.matrix(x)
x
xmat
naive(xmat)
snaive(xmat)
?snaive
snaive(xmat,2)
snaive(xmat,6)
fortune()
load.packages(fortune)
load(fortune)
load.package(fortune)
library(fortune)
library("fortune")
fortune
?fortune
library(fortunes)
fortune()
fortune()
install.packages("np")
library(np)
vignette("np_faq",package="np")
update.packages(checkBuilt=TRUE,ask=FALSE)
window
?window
load
load("fancy")
load(fancy)
library(fpp)
fancy
tsplot(fancy)
plot()
plot
?plot
timeplot<-window(fancy,from=1987,to=1993)
plot(timeplot)
scatterplot(timeplot)
scatter(timeplot)
?plot
timeplot<-window(fancy,from=1987,to=1993)
timeplot<-window(fancy,from=1987,to=1993)
library(fpp)
fancy
timeplot<-window(fancy,from=1987,to=1993)
plot(timeplot)
plot(timeplot,main="monthly sales")
plot(timeplot,main="monthly sales",ylab="Sales")
?plot
plot(timeplot,main="monthly sales",ylab="Sales",asp==1)
plot(timeplot,main="monthly sales",ylab="Sales",asp=1)
plot(timeplot,main="monthly sales",ylab="Sales",asp=1000)
plot(timeplot,main="monthly sales",ylab="Sales")
dimnames(fancy)
sales<-fancy
sales
sales$1
sales<-as.matrix(fancy)
sales
plot(sales)
dimnames(sales)
sales<-as.matrix(fancy,header=TRUE)
sals
sales
dimnames(sales)
plot(sales,type=l)
?plot
plot(sales,type="l")
plot(timeplot)
plot(sales,type="l")
?as.matrix
?edit
edit(fancy)
?ts
seasonplot(fancy)
monthplot(fancy)
seasonplot(fancy)
plot(fancy)
lsales<-log(fancy)
plot(lsales)
lsales<-log(timeplot)
plot(lsales)
lsales<-log(1+timeplot)
plot(lsales)
plot(timeplot)
plot(lsales)
>tslm
?tslm
fit<-tslm(lsales~trend+season)
summary(fit)
plot(lsales)
abline(fit)
monthplot(lsales)
dimnames(lsales)
lsales
?factor
surf<-factor(with(lsales, ifelse(month==Mar),1,0))
surf<-factor(with(lsales, ifelse(month=="Mar"),1,0))
surf<-factor(with(lsales, ifelse(month==3),1,0))
lsales[,3]
lsales[4,3]
ts
?ts
names
?names
names(lsales)
dim
?dim
dim(lsales)
ncol(lsales)
?mat
?as.mat
?as.matrix
surf<-matrix(0,nrow=84,ncol=1)
surf
surf<-1 if lsales=lsales[,3] else 0
?ifelse
surf<-factor(with(lsales, ifelse(year==1993),1,0))
surf<-lsales
surf
surf<-as.matrix(lsales)
surf
lsales
years<-c(1987:1993)
years
years<-c(1987:1993, ncol=1)
years
years<-c(1987:1993,,ncol=1,byrow=F)
?c
years<-c(1987:1993, nrows=84,ncols=1,byrow=F)
years
years<-c(1987:1993,nrows=84,ncols=1,byrow=T)
years
rm(years)
surf
sales
?outer
X <- outer(rep(month.abb, length = 16*12+3), month.abb, "==") + 0
X
lsales
X <- outer(rep(month.abb, length = 7*12+3), month.abb, "==") + 0
dim(X)
12*7
X <- outer(rep(month.abb, length = 7*12), month.abb, "==") + 0
X
dimnames(X)
dimnames(X)[[2]]<-month.abb
dimnames
head(X)
X[,"Mar"]
surf<-X[,"Mar"]
plot(fit)
fit<-tslm(lsales~trend+season+surf)
plot(fit)
summary(fit)
surf
matx<-X[,"Mar"]
surf<-as.matrix(matx)
fit<-tslm(lsales~trend+season+surf)
summary(fit)
surf
fit<-lm(lsales~trend+season+surf)
summary(fit)
fit<-lm(lsales~trend+season+surf)
fit<-tslm(lsales~trend+season+surf)
summary(fit)
cbind(lsales,surf)
fit<-tslm(lsales~trend+season+surf)
summary(fit)
?tslm
lsalesf<-as.dataframe(lsales)
lsalesf<-data.frame(lsales)
lsalesf
?month.abb
month.abb
date<-(C(1987:1993,months.abb),nrow=84,ncol=2,byrow=TRUE)
date<-matrix(C(1987:1993,months.abb),nrow=84,ncol=2,byrow=TRUE)
date<-matrix(C("1987:1993",months.abb),nrow=84,ncol=2,byrow=TRUE)
date<-matrix(C(1987:1993,months.abb),nrow=84,ncol=2,byrow=TRUE)
?seq
seqy<-seq(from="1987",to="1993")
seqy
dim(seqy)
ym<-as.matrix(seqy)
ym
ym[1,1]
date<-matrix(C(ym[1,1],months.abb),nrow=84,ncol=2,byrow=TRUE)
rep()
?rep
years<-matrix(c(rep(ym[1,1],12),rep(ym[2,1],12),rep(ym[3,1],12),rep(ym[4,1],12),rep(ym[5,1],12),rep(ym[6,1],12),rep(ym[7,1],12)),rep(months.abb,12),nrow=84,ncol=2,byrow=FALSE)
matrix(c(rep(ym[1,1],12),rep(ym[2,1],12),rep(ym[3,1],12),rep(ym[4,1],12),rep(ym[5,1],12),rep(ym[6,1],12),rep(ym[7,1],12)),rep(month.abb,12),nrow=84,ncol=2,byrow=FALSE)
?matrix
matrix(c(rep(ym[1,1],12),rep(ym[2,1],12),rep(ym[3,1],12),rep(ym[4,1],12),rep(ym[5,1],12),rep(ym[6,1],12),rep(ym[7,1],12)),rep(month.abb,12),nrow=84,ncol=2,byrow=FALSE)
matrix(c(rep(ym[1,1],12),rep(ym[2,1],12),rep(ym[3,1],12),rep(ym[4,1],12),rep(ym[5,1],12),rep(ym[6,1],12),rep(ym[7,1],12)),rep(month.abb,12),nrow=84,ncol=2,byrow=FALSE)
matrix(c(rep(ym[1,1],12),rep(ym[2,1],12),rep(ym[3,1],12),rep(ym[4,1],12),rep(ym[5,1],12),rep(ym[6,1],12),rep(ym[7,1],12)),rep(month.abb,12),nrow=84,ncol=2,byrow=FALSE,dimnames=)
install.packages("xlsx")
?xlsx
??xlsx
?par
op <- par(mfrow = c(2, 2), # 2 x 2 pictures on one plot
pty = "s")       # square plotting region,
# independent of device size
## At end of plotting, reset to previous settings:
par(op)
## Alternatively,
op <- par(no.readonly = TRUE) # the whole list of settable par's.
## do lots of plotting and par(.) calls, then reset:
par(op)
## Note this is not in general good practice
par("ylog") # FALSE
plot(1 : 12, log = "y")
par("ylog") # TRUE
plot(1:2, xaxs = "i") # 'inner axis' w/o extra space
par(c("usr", "xaxp"))
( nr.prof <-
c(prof.pilots=16,lawyers=11,farmers=10,salesmen=9,physicians=9,
mechanics=6,policemen=6,managers=6,engineers=5,teachers=4,
housewives=3,students=3,armed.forces=1))
par(las = 3)
barplot(rbind(nr.prof)) # R 0.63.2: shows alignment problem
par(las = 0)# reset to default
require(grDevices) # for gray
## 'fg' use:
plot(1:12, type = "b", main="'fg' : axes, ticks and box in gray",
fg = gray(0.7), bty="7" , sub=R.version.string)
ex <- function() {
old.par <- par(no.readonly = TRUE) # all par settings which
# could be changed.
on.exit(par(old.par))
## ...
## ... do lots of par() settings and plots
## ...
invisible() #-- now,  par(old.par)  will be executed
}
ex()
op <- par(mfrow = c(2, 2), # 2 x 2 pictures on one plot
pty = "s")       # square plotting region,
par(op)
rprice<-c(60000,40000,34000,63900,44000,46000,56000,38500,60500,55000,39000,41000,50900,52000,49000,80000,50000,59000,42000,71500)
rprice
sum rprice
rpbar<-mean(rprice)
rpbar
plot(rprice)
hist(rprice)
?hist
plot(rprice)
hist(rprice)
reg<-lm(rprice~rbar)
reg<-lm(rprice~rpbar)
u<-mean(rprice)
rm(rpbar)
ui<-rprice-u
ui
hist(ui)
var(ui)
ui
?var4
?var
sqrt(var(ui))
var(rprice)
boxplot(rprice)
boxplot(rprice,ui)
boxplot(ui)
boxplot(rprice)
mean(ui)
var(ui)
var(rprice)
?qqplot
qqplot(rprice)
qqline(rprice)
?qqplot
?hist
hist(ui,breaks=breaks)
hist(ui,breaks="breaks")
hist(ui,"Sturges")
ui
?hist
qqplot(ui, qchisq(ppoints(ui), df = 4)); abline(0,1, col = 2, lty = 2)
?hist
hist(ui,20)
hist(ui,10)
ACF(ui)
act(ui)
acf(ui)
u
ui
var(ui)
uibar<-mean(ui)
varui<-(sum((ui-uibar)^2))/20
varui
var(ui)
?var
var
var(ui)
varui
(var(ui)*19)/20
varui/20
sqrt(varui/20)
2000*2000
500*500
price<-c(60000,40000,34000,63900,44000,46000,56000,38500,60500,55000,39000,41000,50900,52000,49000,80000,50000,59000,42000,71500)
carefulmean<-mean(price)
carefulmean
library(fpp)
fancy
timeplot<-window(fancy,from=1987,to=1993)
plot(timeplot,main="monthly sales",ylab="Sales")
?var
elec<-read.delim("clipboard")
elec
elec<-read.table(text = readClipboard(), sep = " ")
elec
elec<-read.delim("clipboard",header=TRUE)
elec<-read.delim("clipboard",header=TRUE)
elec<-read.delim("clipboard")
elec
elec<-read.delim("clipboard")
rm(elec)
elec<-read.delim("clipboard")
elec
rm(elec)
elec<-read.delim("clipboard")
elec
elec.ts<-ts(elec)
elec.ts
day<-mat(1:12)
day<-window(1:12)
day
day
args(solve.QP)
args(window)
args(mat)
agrs(ts)
args(ts)
site<-"http://earthquake.usgs.gov/earthquakes/map"
download.file(site,destfile="C:\Users\aidan\Desktop\Projects",method="curl")
download.file(site,destfile="C:/Users/aidan/Desktop/Projects/earthquakes",method="curl")
download.file(site,destfile="C:/Users/aidan/Desktop/Projects/earthquakes",method="curl")
eData<-read.csv("C:\Users\aidan\Desktop\Projects\earthquakes\all_week.csv")
eData<-read.csv("C:/Users/aidan/Desktop/Projects/earthquakes/all_week.csv")
header(eData)
head(eData)
eData[1,3]
datadownloaded<-date()
dateDownloaded<-date()
dateDownloaded
dim(eDAta)
dim(eData)
names(eData)
nrow(eData)
quantiles(eData$latitude)
quantile(eData$latitude)
summary(eData)
class(eData)
sapply(eData[1,class])
sapply(eData[1,],class)
unique(eData$place)
names(eData)
unique(eData$rms)
sum(is.na(eData))
install.packages("np")
vignette("np",package="np")
setwd("C:/Users/aidan/Desktop/Projects")
mw_test<-read.csv("mw_test.csv", header=TRUE)
mat_mw<-as.matrix(mw_test)
head(mat_mw)
quarter<-as.numeric(mat_mw[,2])
q2 <-as.numeric(quarter==2)
q3<-as.numeric(quarter==3)
q4<-as.numeric(quarter==4)
revenue<-as.numeric(mat_mw[,3])
gdp<-as.numeric(mat_mw[,6])
ad<-as.numeric(mat_mw[,7])
unemp<-as.numeric(mat_mw[,8])
fit<-lm(revenue~ad+gdp+unemp)
summary(fit)
fit2<-lm(revenue~q2+q3+q4+ad+gdp+unemp)
rm(list=ls())
getwd
getwd()
## We look at the following model:
## Y^* = theta_0 + theta_1 * X + e
## Y =2 if Y^*>=0, and 0 otherwise
## number of observations (try n=50, n=100, 150 to see the improvement)
n=500
## true parameters
theta_0=0.5
theta_1=1
set.seed(1)
## generate X
x= runif(n, min=-1, max=1)
## generate e
e = rnorm(n, mean = 0, sd=1)
## generate Y
ystar = theta_0 + theta_1 * x + e
y = ifelse(ystar >=0, 1, 0)
## we derived on class
objective = function(theta)
{
thetahat0 = theta[1]
thetahat1 = theta[2]
xtheta = thetahat0 + thetahat1 * x
s = y * log( pnorm(xtheta) ) + (1-y) * log( 1- pnorm(xtheta) )
S = -sum(s)
return(S)
}
## minimize the objective function, note we do unconstrained optimization.
## change the starting value from +/- 1 to 2
temp = optim(c(theta_0 + 1, theta_1 - 1), objective, method = "BFGS")
theta0hat = temp$par[1]
theta1hat = temp$par[2]
## what is the conditional expectation of y given x?
## in the bernoulli case it is easy to calculate the expecation
## it is the weighted average of its outcomes
## ie. 1*P{Y=1\X} + 0*P{Y=0\X}
## which is just P{Y=1\X}
## P{Y*>=0\X}
## P{X'Bo - u >= 0\ X}
## P{u <= X'Bo \ X}
## F(X'Bo)
## we assume that there is a single index model Y = m(X'Bo) + v
## given that E[v\X'Bo]
rm(list=ls())
##must recall library
library(MSBVAR)
## now bivariate case
n = 500
rho = 0.5
xw = rmultnorm(n, matrix(c(0,0),2,1), vmat=matrix(c(1,rho,rho,1),2,2))
x = xw[,1]
w = xw[,2]
c = 1/(2*pi*sqrt(1-rho^2) )
bd1 = bw.nrd(x)
bd2 = bw.nrd(w)
par(mfrow=c(1,2))
x_grid=seq(-3,3, by=.15)
w_grid=seq(-3,3, by=.15)
Y=matrix(NA, nrow=length(x_grid), ncol=length(w_grid))
for(i in 1:length(x_grid))
{
for(j in 1:length(w_grid))
{
Y[i,j] = c * exp( -1/2 * (1-rho^2)^(-1) * (x_grid[i]^2 + w_grid[j]^2 - 2*rho*x_grid[i]*w_grid[j]))
}
}
persp(x_grid, w_grid, Y, phi=20, theta=-50, col="yellow", shade=.000000001, ticktype="detailed",
xlab = "x" , ylab ="w" , zlab = "bivariate normal with mean (0,0) and rho=0.5", main = "truth")
bd1 = bw.nrd0(x)
bd2 = bw.nrd0 (w)
Yhat=matrix(NA, nrow=length(x_grid), ncol=length(w_grid))
for(i in 1:length(x_grid))
{
for(j in 1:length(w_grid))
{
Yhat[i,j] = 1/(n*bd2*bd2) * sum( dnorm( (x-x_grid[i])/bd1 ) * dnorm( (w - w_grid[j])/bd2 ))
}
}
persp(x_grid, w_grid, Yhat, phi=20, theta=-50, col="blue", shade=.000000001, ticktype="detailed",
xlab = "x" , ylab ="w" , zlab = "yhat", main="ESTIMATOR")
## demo for nonparametric regression
## sample size
n=5000
rm(list=ls())
## sample size
n=5000
set.seed(1)
## geneerate right hand side
x = runif(n,1,2)
w = rnorm(n)
e = rnorm(n)
##generate left hand side
y = w^2 + exp(x) + sqrt(x)*w + e
par(mfrow=c(1,2))
#grid for x same as grid for w
x_grid=seq(1,2,by=.05)
w_grid=seq(-2,2,by=.05)
Y=matrix(NA, nrow=length(x_grid), ncol=length(w_grid))
for(i in 1:length(x_grid))
{
for(j in 1:length(w_grid))
{Y[i,j]=w_grid[j]^2 + exp(x_grid[i]) + sqrt(x_grid[i])*w_grid[j]}
}
persp(x_grid,w_grid,Y,phi=0,theta=-50,col="green",shade=.00000001,ticktype="detailed",xlab="x",ylab="w",zlab="y = w^2 + exp(x) + sqrt(x)*w", main="TRUTH")
bd1 = bw.nrd0(x)
bd2 = bw.nrd0(w)
Yhat=matrix(NA,nrow=length(x_grid),ncol=length(w_grid))
for(i in 1:length(x_grid))
{
for(j in 1:length(w_grid))
{
K = dnorm((x - x_grid[i])/bd1)*dnorm( (w - w_grid[j])/bd2)
Yhat[i,j] = sum( y*K) / sum(K)
}
}
persp(x_grid,w_grid,Yhat,phi=0,theta=-50,col="orange",shade=.00000001,ticktype="detailed",xlab="x",ylab="w",zlab="y = w^2 + exp(x) + sqrt(x)*w", main="estimator")
rm(list=ls())
myfunction <- function() {
x<-rnorm(100)
mean(x)
}
ls()
myfuncation
myfunction
getwd()
setwd("C:/Users/aidan/data_science/datasciencecoursera")
getwd()
ls
ls()
dir()
