code goes herere
n=5; T=1; r=0.05; sigma=.4;S=50;K=50
price=function(n){
u.n=exp(sigma*sqrt(T/n));
d.n=1/u.n
p.n=(exp(r*T/n)-d.n)/(u.n-d.n)
SJ=matrix(0,n+1,n+1)
SJ[1,1]=S
for(i in(2:(n+1)))
{for(j in(1:i)){SJ[i,j]=S*u.n^(i-j)*d.n^(j-1)}}
OPT=matrix(0,n+1,n+1)
OPT[n+1,]=(SJ[n+1,]-K)*(SJ[n+1,]>K)
for(i in(n:1))
{for(j in(1:i)){OPT[i,j]=exp(-r*T/n)*(OPT[i+1,j]*p.n+
(1-p.n)*OPT[i+1,j+1])}}
return(OPT[1,1])
}
N=10:400
V=Vectorize(price)(N)
plot(N,V,type="l")
V
print V
print()
help(print)
demo(print)
d1=1/(sigma*sqrt(T))*(log(S/K)+(r+sigma^2/2)*T)
d2=d1-sigma*sqrt(T)
BS=S*pnorm(d1)-K*exp(-r*T)*pnorm(d2)
abline(h=BS,lty=2,col="red")
clear
d1=1/(sigma*sqrt(T))*(log(S/K)+(r+sigma^2/2)*T)
d2=d1-sigma*sqrt(T)
BS=S*pnorm(d1)-K*exp(-r*T)*pnorm(d2)
abline(h=BS,lty=2,col="red")
price.american=function(n,opt="put"){
u.n=exp(sigma*sqrt(T/n)); d.n=1/u.n
p.n=(exp(r*T/n)-d.n)/(u.n-d.n)
SJ=matrix(0,n+1,n+1)
SJ[1,1]=S
for(i in(2:(n+1)))
{for(j in(1:i)) {SJ[i,j]=S*u.n^(i-j)*d.n^(j-1)}}
OPTe=matrix(0,n+1,n+1)
OPTa=matrix(0,n+1,n+1)
if(opt=="call"){
OPTa[n+1,]=(SJ[n+1,]-K)*(SJ[n+1,]>K)
OPTe[n+1,]=(SJ[n+1,]-K)*(SJ[n+1,]>K)
}
if(opt=="put"){
OPTa[n+1,]=(K-SJ[n+1,])*(SJ[n+1,]<K)
OPTe[n+1,]=(K-SJ[n+1,])*(SJ[n+1,]<K)
}
for(i in(n:1))
{
for(j in(1:i))
{if(opt=="call"){
OPTa[i,j]=max((SJ[i,j]-K)*(SJ[i,j]>K),
exp(-r*T/n)*(OPTa[i+1,j]*p.n+
(1-p.n)*OPTa[i+1,j+1]))}
if(opt=="put"){
OPTa[i,j]=max((K-SJ[i,j])*(K>SJ[i,j]),
exp(-r*T/n)*(OPTa[i+1,j]*p.n+
(1-p.n)*OPTa[i+1,j+1]))}
OPTe[i,j]=exp(-r*T/n)*(OPTe[i+1,j]*p.n+
(1-p.n)*OPTe[i+1,j+1])}}
priceop=c(OPTe[1,1],OPTa[1,1])
names(priceop)=c("E","A")
return(priceop)}
price.american=function(n,opt="put"){
u.n=exp(sigma*sqrt(T/n)); d.n=1/u.n
p.n=(exp(r*T/n)-d.n)/(u.n-d.n)
SJ=matrix(0,n+1,n+1)
SJ[1,1]=S
for(i in(2:(n+1)))
{for(j in(1:i)) {SJ[i,j]=S*u.n^(i-j)*d.n^(j-1)}}
OPTe=matrix(0,n+1,n+1)
OPTa=matrix(0,n+1,n+1)
if(opt=="call"){
OPTa[n+1,]=(SJ[n+1,]-K)*(SJ[n+1,]>K)
OPTe[n+1,]=(SJ[n+1,]-K)*(SJ[n+1,]>K)
}
if(opt=="put"){
OPTa[n+1,]=(K-SJ[n+1,])*(SJ[n+1,]<K)
OPTe[n+1,]=(K-SJ[n+1,])*(SJ[n+1,]<K)
}
for(i in(n:1))
{
for(j in(1:i))
{if(opt=="call"){
OPTa[i,j]=max((SJ[i,j]-K)*(SJ[i,j]>K),
exp(-r*T/n)*(OPTa[i+1,j]*p.n+
(1-p.n)*OPTa[i+1,j+1]))}
if(opt=="put"){
OPTa[i,j]=max((K-SJ[i,j])*(K>SJ[i,j]),
exp(-r*T/n)*(OPTa[i+1,j]*p.n+
(1-p.n)*OPTa[i+1,j+1]))}
OPTe[i,j]=exp(-r*T/n)*(OPTe[i+1,j]*p.n+
(1-p.n)*OPTe[i+1,j+1])}}
priceop=c(OPTe[1,1],OPTa[1,1])
names(priceop)=c("E","A")
return(priceop)}
d1=1/(sigma*sqrt(T))*(log(S/K)+(r+sigma^2/2)*T)
d2=d1-sigma*sqrt(T)
BS=-S*pnorm(-d1)+K*exp(-r*T)*pnorm(-d2)  )
find.packages("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
swirl()
library(swirl)
add2<-function(x,y) {
x + y
}
add2<-function(x,y) {
+   x + y
+ }
add2(3,5)
add2(7,9)
above<-function(x,n){
use<-x>n
x[use]
}
x<-1:20
above(x,11)
above(x,4)
columnmean<- function(y){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i])
}
means
}
columnmeans(airquality)
airquality
columnmeans<- function(y){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i])
}
means
}
columnmeans(airquality)
columnmeans<- function(y, removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i])
}
means
}
columnmeans(airquality)
columnmeans
columnmeans<- function(y, removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i])
}
means
}
columnmeans(airquality)
columnmeans<- function(y, removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i]) na.rm=removeNA
}
means
}
columnmeans<- function(y, removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i]) na.rm=removeNA
}
means
}
columnmeans<- function(y, removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i], na.rm = removeNA)
}
means
}
columnmeans(airquality)
rm(list=ls())
install.packages("swirl")
library(swirl)
swirl()
rm(list=rm())
rm(list=rm())
rm(list=ls())
library(swirl)
swirl()
plot(child~parent,galton)
plot(jitter(child,4)~parent,galton)
f<-function(x,y){}
f<-function(x,y){
x^2+x/z
}
f(4,3)
z<-z
z<-t
f(5,4)
sys.time()
Sys.time()
?rnorm
b<-rnorm(10)
b
getwd()
?array
?rnorm
?array
?gl
?sapply
lapply
?lapply
?str
debug(lm)
lm(y~x)
?best
??best
all_data<-outcome<-read.csv("outcome-of-care-measures.csv",colClasses="character")
getwd()
?get.hist.quote
library(tseries)
?get.hist.quote
get.hist.quote
install.packages("quantmod")
library(quantmod)
?getSymbols
tickers <- c("RDS-B", "WMT", "TD", "VZ", "MDLZ", "MCD", "BRK-B", "KRFT", "AAPL", "FB", "TSLA", "VTI", "VMBS", "MBG", "JWN", "GM", "TGT", "JBL", "BLK", "USO", "XHS", "KRE", "TIF", "XLK", "TJX")
getSymbols(tickers, from="2005-12-25", to="2011-01-31")
head(tickers)
ClosePrices <- do.call(merge, lapply(tickers[,1], function(x) Cl(get(x))))
ClosePrices <- do.call(merge, lapply(tickers, function(x) Cl(get(x))))
tickers <- c("RDS-B", "WMT", "TD", "VZ", "MDLZ", "MCD", "BRK-B", "AAPL", "FB", "TSLA", "VTI", "VMBS", "MBG", "JWN", "GM", "TGT", "JBL", "BLK", "USO", "XHS", "KRE", "TIF", "XLK", "TJX")
getSymbols(tickers, from="2005-12-25", to="2011-01-31")
# If you want to merge all the close prices into one object:
ClosePrices <- do.call(merge, lapply(tickers, function(x) Cl(get(x))))
tickers <- c("RDS-B", "WMT", "TD", "VZ", "MDLZ", "MCD", "BRK-B", "AAPL", "TSLA", "VTI", "VMBS", "MBG", "JWN", "GM", "TGT", "JBL", "BLK", "USO", "XHS", "KRE", "TIF", "XLK", "TJX")
getSymbols(tickers, from="2005-12-25", to="2011-01-31")
# If you want to merge all the close prices into one object:
ClosePrices <- do.call(merge, lapply(tickers, function(x) Cl(get(x))))
tickers <- c("RDS-B", "WMT", "TD", "VZ", "MDLZ", "MCD", "BRK-B", "AAPL", "TSLA")
getSymbols(tickers, from="2005-12-25", to="2011-01-31")
# If you want to merge all the close prices into one object:
ClosePrices <- do.call(merge, lapply(tickers, function(x) Cl(get(x))))
head(ClosePrices)
dim(ClosingPrices)
dim(ClosePrices)
?do.call
head(ClosingPrices$TSLA)
head(ClosePrices$TSLA)
tail(ClosePrices$TSLA)
table(ClosePrices$TSLA)
length(ClosePrices$TSLA)
length(complete.cases(ClosePrices$TSLA))
table(complete.cases(ClosePrices$TSLA))
clean<-na.omit(ClosePrices$TSLA)
length(clean)
head(clean)
tickers <- c("RDS-B", "WMT", "TD", "VZ", "MDLZ", "MCD", "BRK-B", "AAPL", "TSLA")
getSymbols(tickers, from="2005-12-25", to="2011-01-31")
# If you want to merge all the close prices into one object:
ClosePrices <- do.call(merge, lapply(tickers, function(x) Cl(get(x))))
head(ClosePrices)
library(quantmod)
tickers <- c("RDS-B", "WMT", "TD", "VZ", "MDLZ", "MCD", "BRK-B", "AAPL", "TSLA")
getSymbols(tickers, from="2005-12-25", to="2011-01-31")
# If you want to merge all the close prices into one object:
ClosePrices <- do.call(merge, lapply(tickers, function(x) Cl(get(x))))
head(ClosePrices)
dim(ClosePrices)
library(datasets)
data(iris)
names(iris)
tapply(iris$Sepal.Length, mean)
?tapply
head(risi)
head(iris)
tapply(iris$Sepal.Length, Species, mean)
tapply(iris$Sepal.Length, "Species", mean)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
?apply
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
new <- tapply(mtcars$mpg, mtcars$cyl, mean)
new
dim(new)
class(new)
new[3]-new[1]
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
apply(iris, 2, mean)
class(iris)
class(iris#Sepal.Length)
d
class(iris$Sepal.Length)
colMeans(iris$Sepal.Length)
apply(iris, 1, mean)
warnings()
apply(iris[, 1:4], 2, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
head(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
new <- tapply(mtcars$hp, mtcars$cyl, mean)
new
class(new)
head(new)
str(new)
new[3]
new[1]
new[[3]]
new[3]-new[1]
new[[3]]-new[[1]]
rankall <- function (outcome, num = "best") {
#read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
data <- data[,c(2,7,11,17,23)]
data[,c(3,4,5)] <- sapply(data[,c(3,4,5)], as.numeric)
names(data) <- c("hospitals","states","heart attack","heart failure","pneumonia")
#check that state and outcome are vaild
outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!(outcome%in%outcomes)) {stop("invalid outcome")}
div <- split(data, data$states, drop=FALSE)
org <- lapply(div, function(x) x[order(x[,outcome]),])
final_list <- lapply(org, "[", 20,c(1,2,3,4),drop=TRUE)
final_df <- do.call("rbind", final_list)
final_df
}
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
getwd()
setwd("C:/Users/NC/data_science")
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
head(data)
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
data <- data[,c(2,7,11,17,23)]
data[,c(3,4,5)] <- sapply(data[,c(3,4,5)], as.numeric)
names(data) <- c("hospitals","states","heart attack","heart failure","pneumonia")
#check that state and outcome are vaild
outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!(outcome%in%outcomes)) {stop("invalid outcome")}
div <- split(data, data$states, drop=FALSE)
org <- lapply(div, function(x) x[order(x[,outcome]),])
final_list <- lapply(org, "[", 20,c(1,2,3,4),drop=TRUE)
debugSource('C:/Users/NC/data_science/rankall.R')
debugSource('C:/Users/NC/data_science/rankall.R')
debugSource('C:/Users/NC/data_science/rankall.R')
rankall <- function (outcome, num = "best") {
#read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
data <- data[,c(2,7,11,17,23)]
data[,c(3,4,5)] <- sapply(data[,c(3,4,5)], as.numeric)
names(data) <- c("hospitals","states","heart attack","heart failure","pneumonia")
#check that state and outcome are vaild
outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!(outcome%in%outcomes)) {stop("invalid outcome")}
div <- split(data, data$states, drop=FALSE)
org <- lapply(div, function(x) x[order(x[,outcome]),])
final_list <- lapply(org, "[", 20,c(1,2,3,4),drop=TRUE)
final_df <- do.call("rbind", final_list)
final_df
}
rankall("heart attack", 4)
