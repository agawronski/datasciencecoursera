getwd()
library(jpeg)
?readJPEG
img <- readJPEG("./getting_cleaning/leek.jpg")
img
?image
image(t(img)[,nrow(img):1])
image(img)
class(img)
img <- readJPEG("./getting_cleaning/leek.jpg", native=TRUE)
class(img)
image(img)
?image
image(t(img)[,nrow(img):1])
?image
image(t(volcano)[ncol(volcano):1,])
image(t(img)[,nrow(img):1])
svd1 <- svd(scale(img))
svd1
names(svd1)
plot(svd1$d^2/sum(svd1$d^2), pch=19, xlab="Singular Vector", ylab="Variance explained")
approx1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
approx1
approx5 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
?t
?diag
approx10 <- svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10])
image(approx1)
image(approx5)
image(approx10)
image(approx1)
image(approx10)
image(img)
img(approx1)
image(approx1)
image(approx5)
image(approx10)
dim(svd$u)
dim(svd1$u)
svd1$$d
dim(svd1$d)
dim(svd1$u)
dim(svd1$v)
class(svd1$d)
library(data.table)
# 1 Merge Training data
# set features as the variable names for x_train
features <- read.table(file="features.txt", header=FALSE)
library(data.table)
# 1 Merge Test data
# set features as the variable names for x_test
features <- read.table(file="features.txt", header=FALSE)
x_test <- read.table(file="test/X_test.txt", header=FALSE)
names(x_test) <- features[,2]
y_test <- read.table(file="test/y_test.txt", header=FALSE)
names(y_test) <- "labels" # to be replaced with activity labels
#column bind the "test Labels" to the "Test Set"
test_df <- cbind(y_test, x_test)
#column bind the subject id
subject_id <- read.table(file="test/subject_test.txt", header=FALSE)
names(subject_id) <- "SubjectId"
test_df <- cbind(test_df, subject_id)
#merge test_df and the activity labels
activity_labels <- read.table(file="activity_labels.txt", header=FALSE)
#remove the underscore and make all lower case
activity_labels[,2] <- tolower(gsub("_", "", activity_labels[,2]))
#capitalize the first letter of upstairs for readability
substr(activity_labels[2,2], 8,8) <- toupper(substr(activity_labels[2,2], 8,8))
#capitalize the first letter of downstairs for readability
substr(activity_labels[3,2], 8,8) <- toupper(substr(activity_labels[3,2], 8,8))
test_df <- merge(test_df, activity_labels, by.x="labels", by.y="V1", all=TRUE)
colnames(test_df)[564] <- "activity" #rename new activty column
#Repeat the process with the training set
# 1 Merge Training data
# set features as the variable names for x_train
features <- read.table(file="features.txt", header=FALSE)
x_train <- read.table(file="train/X_train.txt", header=FALSE)
names(x_train) <- features[,2]
y_train <- read.table(file="train/y_train.txt", header=FALSE)
names(y_train) <- "labels" # to be replaced with activity labels
#column bind the "Training Labels" to the "Training Set"
train_df <- cbind(y_train, x_train)
#column bind the subject id
subject_id <- read.table(file="train/subject_train.txt", header=FALSE)
names(subject_id) <- "SubjectId"
train_df <- cbind(train_df, subject_id)
#merge train_df and the activity labels
activity_labels <- read.table(file="activity_labels.txt", header=FALSE)
#remove the underscore and make all lower case
activity_labels[,2] <- tolower(gsub("_", "", activity_labels[,2]))
#capitalize the first letter of upstairs for readability
substr(activity_labels[2,2], 8,8) <- toupper(substr(activity_labels[2,2], 8,8))
#capitalize the first letter of downstairs for readability
substr(activity_labels[3,2], 8,8) <- toupper(substr(activity_labels[3,2], 8,8))
train_df <- merge(train_df, activity_labels, by.x="labels", by.y="V1", all=TRUE)
colnames(train_df)[564] <- "activity" #rename new activty column
#Combine the test and training sets
library(dplyr)
test_df <- tbl_df(test_df)
train_df <- tbl_df(train_df)
data_set <- rbind(train_df, test_df)
# select only measurements on mean and standard deviation and remove the angle measurement
data_set <- data_set %>%
select(SubjectId, activity, contains("mean"), contains("std"), -contains("angle"))
#remove the function parenthesis
names(data_set) <- gsub("\\()", "", names(data_set))
#remove the time indicator as the f (FFT) indicator is enough of a differentiator
names(data_set) <- sub("^t", "", names(data_set))
#eliminate the double body (?typo)
names(data_set) <- sub("BodyBody", "Body", names(data_set))
#Change mean to Mean for readability
names(data_set) <- sub("mean", "Mean", names(data_set))
#Remove -
names(data_set) <- gsub("-", "", names(data_set))
#Replace std with Std for readability
names(data_set) <- gsub("std", "Std", names(data_set))
#average each variable for each activity and each subject
grouped_set <- group_by(data_set, activity, SubjectId)
final_set <- summarise_each(grouped_set, "mean")
#write the table into the working directory as final_set.txt
write.table(final_set, file="final_set.txt", row.names=FALSE)
#take a look at the tidy data set
View(final_set)
library(data.table)
# 1 Merge Training data
# set features as the variable names for x_train
features <- read.table(file="./getting_cleaning/course_project/features.txt", header=FALSE)
x_test <- read.table(file="./getting_cleaning/course_project/test/X_test.txt", header=FALSE)
names(x_test) <- features[,2]
y_test <- read.table(file="./getting_cleaning/course_project/test/y_test.txt", header=FALSE)
names(y_test) <- "labels" # to be replaced with activity labels
#column bind the "Training Labels" to the "Training Set"
test_df <- cbind(y_test, x_test)
#column bind the subject id
subject_id <- read.table(file="./getting_cleaning/course_project/test/subject_test.txt", header=FALSE)
names(subject_id) <- "SubjectId"
test_df <- cbind(test_df, subject_id)
#merge test_df and the activity labels
activity_labels <- read.table(file="./getting_cleaning/course_project/activity_labels.txt", header=FALSE)
#remove the underscore and make all lower case
activity_labels[,2] <- tolower(gsub("_", "", activity_labels[,2]))
#capitalize the first letter of upstairs for readability
substr(activity_labels[2,2], 8,8) <- toupper(substr(activity_labels[2,2], 8,8))
#capitalize the first letter of downstairs for readability
substr(activity_labels[3,2], 8,8) <- toupper(substr(activity_labels[3,2], 8,8))
test_df <- merge(test_df, activity_labels, by.x="labels", by.y="V1", all=TRUE)
colnames(test_df)[564] <- "activity" #rename new activty column
#Repeat the process with the training set
# 1 Merge Training data
# set features as the variable names for x_train
features <- read.table(file="./getting_cleaning/course_project/features.txt", header=FALSE)
x_train <- read.table(file="./getting_cleaning/course_project/train/X_train.txt", header=FALSE)
names(x_train) <- features[,2]
y_train <- read.table(file="./getting_cleaning/course_project/train/y_train.txt", header=FALSE)
names(y_train) <- "labels" # to be replaced with activity labels
#column bind the "Training Labels" to the "Training Set"
train_df <- cbind(y_train, x_train)
#column bind the subject id
subject_id <- read.table(file="./getting_cleaning/course_project/train/subject_train.txt", header=FALSE)
names(subject_id) <- "SubjectId"
train_df <- cbind(train_df, subject_id)
#merge train_df and the activity labels
activity_labels <- read.table(file="./getting_cleaning/course_project/activity_labels.txt", header=FALSE)
#remove the underscore and make all lower case
activity_labels[,2] <- tolower(gsub("_", "", activity_labels[,2]))
#capitalize the first letter of upstairs for readability
substr(activity_labels[2,2], 8,8) <- toupper(substr(activity_labels[2,2], 8,8))
#capitalize the first letter of downstairs for readability
substr(activity_labels[3,2], 8,8) <- toupper(substr(activity_labels[3,2], 8,8))
train_df <- merge(train_df, activity_labels, by.x="labels", by.y="V1", all=TRUE)
colnames(train_df)[564] <- "activity" #rename new activty column
#Combine the test and training sets
library(dplyr)
test_df <- tbl_df(test_df)
train_df <- tbl_df(train_df)
data_set <- rbind(train_df, test_df)
# select only measurements on mean and standard deviation
data_set <- data_set %>%
select(SubjectId, activity, contains("mean"), contains("std"), -contains("angle"))
#remove the function parenthesis
names(data_set) <- gsub("\\()", "", names(data_set))
#remove the time indicator as the f (FFT) indicator is enough of a differentiator
names(data_set) <- sub("^t", "", names(data_set))
#eliminate the double body (?typo)
names(data_set) <- sub("BodyBody", "Body", names(data_set))
#Change mean to Mean for readability
names(data_set) <- sub("mean", "Mean", names(data_set))
#Remove -
names(data_set) <- gsub("-", "", names(data_set))
#Replace std with Std for readability
names(data_set) <- gsub("std", "Std", names(data_set))
#average each variable for each activity and each subject
grouped_set <- group_by(data_set, activity, SubjectId)
final_set <- summarise_each(grouped_set, "mean")
View(final_set)
write.table(final_set, file="./getting_cleaning/course_project/final_set.txt", row.names=FALSE)
par(mfrow-c(1,2), mar=c(5,4,1,1))
par(mfrow=c(1,2), mar=c(5,4,1,1))
names(train_df)
dim(train_df)
class(train_df$activity)
train_df <- transform(train_df, activity=factor(activity))
class(train_df$activity)
sub1 <- subset(train_df, subject==1)
sub1 <- subset(train_df, SubjectId==1)
sub1
tail(sub1)
head(names(train_df)
)
plot(sub1[,2], col=sub1$activity, ylab=names(sub1)[2])
plot(sub1[,3], col=sub1$activity, ylab=names(sub1)[3])
names(sub1$activity)
names(train_df$activity)
sub1$activity
legend("bottomright", legend=Unique(sub1$activity), col=unique(sub1$activity))
legend("bottomright", legend=unique(sub1$activity), col=unique(sub1$activity))
legend("bottomright", legend=unique(sub1$activity), col=unique(sub1$activity), pch=1)
distanceMatrix <- dist(sub1)
hc <- hclust(distanceMatrix)
myplclust(hc, lab.col=unclass(sub1$activity))
library(hclust)
library(cluster)
myplclust(hc, lab.col=unclass(sub1$activity))
hclust(hc, lab.col=unclass(sub1$activity))
hclust(hc)
?scale
pysch <- c(63,83,78,54,74,88,69,72)
length(psych)
psych <- c(63,83,78,54,74,88,69,72)
length(psych)
mean(psych)
ten <- c(rep(100,10))
ten
aced <- rbind(psych, ten)
aced <- c(psych, ten)
aced
length(aced)
sum(aced)
(sum(aced))/18
install.packages("caret")
library(ISLR)
install.packages(ISLR)
install.packages("ISLR")
library(ISLR)
library(caret)
data(Wage)
head(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim)(testing)
dim(testing)
table(training$jobclass)
dummies <- dummyVars(wage ~ jobclass, data=training)
head(dummies)
dummmies
dummies
class(dummies)
head(predict(dummies, newdata=training))
nsv <- nearZeroVar(training, saveMetrics=TRUE)
nsv
nsv <- nearZeroVar(training)
nsv
library(splines)
#create a polynomial variable
bsBasis <- bs(training$age, df=3)
bsBasis
#create a polynomial variable (third degree polynomial in this case)
bsBasis <- bs(training$age, df=3)
bsBasis
lm1 <- lm(wage ~ bsBasis, data=training)
plot(training$age, training$wage, pch=19)
plot(training$age, training$wage, pch=19, cex=0.5)
points(train$age, predict(lm1, newdata=training), col="red", pch=19, cex=0.5)
lm1 <- lm(wage ~ bsBasis, data=training)
plot(training$age, training$wage, pch=19, cex=0.5)
points(train$age, predict(lm1, newdata=training), col="red", pch=19, cex=0.5)
?points
points(train$age, predict(lm1, newdata=training), type="p", col="red", pch=19, cex=0.5)
points(training$age, predict(lm1, newdata=training), col="red", pch=19, cex=0.5)
lm1
# Splines on the test set must be done using the exact same proceedure as the training set
predict(bsBasis, age=testing$age)
dim(test)
dim(testing)
dim(training)
dim(testing)
predict(bsBasis, age=testing$age)
head(predict(bsBasis, age=testing$age))
library(caret)
library(kernlab)
install.packages(kernlab)
install.packages("kernlab")
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
M <- abs(cor(training[,-58]))
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
names(span)
names(spam)
length(names(spam))
str(spam)
M <- abs(cor(training[,-58]))
?cor
class(training[,-58])
str(training[,-58])
training[,-58] <- as.numeric[,-58]
M <- abs(cor(training))
M <- abs(cor(training[,58]))
training[,58]
training[,-58]
cor(training[,-58])
cor(as.numeric(training[,-58]))
cor(as.numeric(unlist(training[,-58]))
)
as.matrix(training[,-58])
cor((as.matrix(training[,-58])))
class(as.matrix(training[,-58]))
str(as.matrix(training[,-58]))
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
training[,-58] <- as.numeric[,-58]
M <- co(training[,-58])
M <- cor(training[,-58])
sapply(training[,-58], is.numeric)
M <- cor(sapply(training[,-58], is.numeric))
M <- cor(training[sapply(training[,-58], is.numeric)])
head(M)
M
training
names(training)
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
M <- cor(training[,-58])
str(spam)
dim(spam)
M <- cor(training[,1:57])
M <- cor(training[,c(1:57)])
training_wO_type <- training[,-58]
str(training_wo_type)
training_wo_type <- training[,-58]
str(training_wo_type)
str(training)
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
str(spam)
dim(spam)
dim(training)
dim(testing)
?createDataPartition
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M>0.8, arr.ind=T)
names(spam)[c(34,42)]
plot(spam[,34],spam[,32])
names(spam)[c(34,32)]
plot(spam[,34],spam[,32])
X <- 0.71*training$num415 + 0.71*training$num857
library(caret)
data(faithful)
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]
testFaith <- faithful[-inTrain,]
head(trainFaith)
plot(trainFaith$eruptions, trainFaith$waiting, pch=19, col="blue", xlab="waiting", ylab="duration")
lm1 <- lm(eruptions ~ waiting, data=trainFaith)
summary(lm1)
lines(trainFaith$waiting, lm1$fitted, lwd=3)
plot(trainFaith$eruptions, trainFaith$waiting, pch=19, col="blue", xlab="waiting", ylab="duration")
lines(trainFaith$waiting, lm1$fitted, lwd=3)
lm1 <- lm(eruptions ~ waiting, data=trainFaith)
summary(lm1)
plot(trainFaith$eruptions, trainFaith$waiting, pch=19, col="blue", xlab="waiting", ylab="duration")
lines(trainFaith$waiting, lm1$fitted, lwd=3)
library(caret)
data(faithful)
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]
library(caret)
data(faithful)
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]
testFaith <- faithful[-inTrain,]
head(trainFaith)
plot(trainFaith$eruptions, trainFaith$waiting, pch=19, col="blue", xlab="waiting", ylab="duration")
lm1 <- lm(eruptions ~ waiting, data=trainFaith)
summary(lm1)
plot(trainFaith$eruptions, trainFaith$waiting, pch=19, col="blue", xlab="waiting", ylab="duration")
lines(trainFaith$waiting, lm1$fitted, lwd=3)
?lines
lines(trainFaith$waiting, lm1$fitted, lwd=3)
lines(trainFaith$waiting, lm1$fitted, lwd=3)
plot(trainFaith$waiting, trainFaith$eruptions, pch=19, col="blue", xlab="waiting", ylab="duration")
lines(trainFaith$waiting, lm1$fitted, lwd=3)
coef(lm1)[1] + coef(lm1)[2]*80
newdata <- data.frame(waiting=80)
newdata
predict(lm1, newdata)
library(caret)
setwd("C:/Users/aidan/data_science/datasciencecoursera/kaggle/Bicycle")
swirl()
library(swirl)
swirl()
swirl()
bicycle <- lm(count~season + holiday + workingday + weather + atemp + humidity + windspeed)
bicycle <- lm(count~season + holiday + workingday + weather + atemp + humidity + windspeed, data=training)
library(caret)
setwd("C:/Users/aidan/data_science/datasciencecoursera/kaggle/Bicycle")
training <- read.csv("train.csv")
testing <- read.csv("test.csv")
# names(training)
# [1] "datetime"   "season"     "holiday"    "workingday" "weather"    "temp"
# [7] "atemp"      "humidity"   "windspeed"  "casual"     "registered" "count"
bicycle <- lm(count~season + holiday + workingday + weather + atemp + humidity + windspeed, data=training)
summary(bicycle)
output <- predict(bicycle, testing)
output
dim(output)
head(output)
library(lubridate)
library(caret)
library(randomForest)
train$hour <- hour(train$datetime)
training$hour <- hour(training$datetime)
testing$hour <- hour(testing$datetime)
length(trainin$datetime)
length(training$datetime)
length(training$hour)
head(training$hour)
training$hour
?hour
training$hour >2
training$hour[1:24]
training$datetime[1]
training$dow <- wday(training$datetime)
testing$dow <- wday(testing$datetime)
str(testing)
cor(training$temp, training$atemp)
fit <- randomForest(as.factor(count) ~ season + holiday + weather + dow + hour + temp + atemp + humidity + windspeed, date=training, ntree=700, importance=TRUE)
library(caret)
library(lubridate)
library(randomForest)
test$count <- 0
testing$count <- 0
# create a random forest
fit <- randomForest(as.factor(count) ~ season + holiday + weather + dow + hour + temp + atemp + humidity + windspeed, date=training, ntree=700, importance=TRUE)
fit <- randomForest(as.factor(training$count) ~ season + holiday + weather + dow + hour + temp + atemp + humidity + windspeed, date=training, ntree=700, importance=TRUE)
?randomForest
traceback
fit <- randomForest(as.factor(training$count) ~ training$season + training$holiday + training$weather + training$dow + hour + training$temp + training$atemp + training$humidity + training$windspeed, date=training, ntree=700, importance=TRUE)
fit <- randomForest(as.factor(training$count) ~ training$season + training$holiday + training$weather + training$dow + training$hour + training$temp + training$atemp + training$humidity + training$windspeed, date=training, ntree=700, importance=TRUE)
varImpPlot(fit)
install_from_swirl("Regression Models")
Prediction <- predict(fit, testing)
table(is.na(testing))
dim(testing)
head(Prediction)
prediction <- predict(fit, testing)
